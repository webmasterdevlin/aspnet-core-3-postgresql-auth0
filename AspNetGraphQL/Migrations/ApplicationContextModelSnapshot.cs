// <auto-generated />
using System;
using AspNetGraphQL.Entities.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace AspNetGraphQL.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("AspNetGraphQL.Entities.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f9f24a09-4836-4c55-a38b-967cb9e10290"),
                            Name = "Leo Tolstoy"
                        },
                        new
                        {
                            Id = new Guid("321b4996-e320-4f1c-beb7-b55ce8fb7655"),
                            Name = "William Shakespeare"
                        },
                        new
                        {
                            Id = new Guid("9e80c3ed-9829-4aa8-a1e2-5e42c3d4d2e9"),
                            Name = "Mark Twain"
                        });
                });

            modelBuilder.Entity("AspNetGraphQL.Entities.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Genre")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<bool>("Published")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("AspNetGraphQL.Entities.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f9f24a09-4836-4c55-a38b-967cb9e10290"),
                            Age = 34,
                            Name = "Devlin Duldulao"
                        },
                        new
                        {
                            Id = new Guid("321b4996-e320-4f1c-beb7-b55ce8fb7655"),
                            Age = 50,
                            Name = "Jef Bezos"
                        },
                        new
                        {
                            Id = new Guid("9e80c3ed-9829-4aa8-a1e2-5e42c3d4d2e9"),
                            Age = 45,
                            Name = "Elon Musk"
                        });
                });

            modelBuilder.Entity("AspNetGraphQL.Entities.Book", b =>
                {
                    b.HasOne("AspNetGraphQL.Entities.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
